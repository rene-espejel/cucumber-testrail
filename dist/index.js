// Generated by CoffeeScript 2.4.1
(function () {
    var ConfigReader, CucumberResultReader, OptionsReader, TestRailService, co;

    co = require('co');

    ConfigReader = require('./config_reader');

    CucumberResultReader = require('./cucumber_result_reader');

    OptionsReader = require('./options_reader');

    TestRailService = require('./testrail_service');

    co(function* () {
        var config, config_reader, cucumber_reader, e, options_reader, opts, suite_config, testrail_metrics,
            testrail_service;
        try {
            // holds options passed in by CLI
            opts = {};
            // holds information from cucumber_testrail.yml
            config = [];
            // contains testrail scenarios from cucumber in testrail format
            testrail_metrics = [];
            options_reader = new OptionsReader();
            opts = options_reader.parse();
            config_reader = new ConfigReader(opts.config);
            config = config_reader.parse();
            console.log("opts.write after config and options reader: " + opts.write);
            if (opts.write) {
                suite_config = config.suites.filter(({project_symbol}) => {
                    return project_symbol === opts.write;
                });
                console.log("opts.write after weird stuff: " + opts.write);
                if (!suite_config.length) {
                    throw new Error(`project symbol ${opts.write} not found in cucumber_testrail.yml`);
                }
                testrail_service = new TestRailService(config, suite_config[0], opts, {});
                return testrail_service.fetchScenarios();
            }
            cucumber_reader = new CucumberResultReader(config, opts.result);
            testrail_metrics = (yield cucumber_reader.parse());
            return (yield Promise.all(config.suites.map((suite_config) => {
                testrail_service = new TestRailService(config, suite_config, opts, testrail_metrics);
                return testrail_service.sendTestResults();
            })));
        } catch (error) {
            e = error;
            return console.log(`${e}`);
        }
    });

}).call(this);

//# sourceMappingURL=index.js.map
