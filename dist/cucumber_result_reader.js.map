{
  "version": 3,
  "file": "cucumber_result_reader.js",
  "sourceRoot": "../src",
  "sources": [
    "cucumber_result_reader.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs = require 'mz/fs'\n\nTESTRAIL_STATUSES = FAILED: 5, PASSED: 1\n\nclass CucumberResultReader\n\n  constructor: ({symbols}, @file) ->\n    @symbols = symbols or {}\n\n\n  parse: () ->\n    results = fs.readFileSync @file, 'utf8'\n    testRailMetrics = {}\n    @symbols.forEach (item) -> testRailMetrics[item] = []\n    JSON.parse(results).forEach (result) =>\n      result.elements?.forEach ({tags=[], type, steps}) =>\n        testrail_ids = @_testRailTags tags\n        return unless testrail_ids.length and type is 'scenario'\n        testrail_ids.forEach ({name}) =>\n          {symbol, case_id} = @_parseName name\n          {comment, status_id} = @_examineScenario steps\n          testRailMetrics[symbol].push {case_id, status_id, comment}\n    testRailMetrics\n\n\n  _examineScenario: (steps) ->\n    status_id = TESTRAIL_STATUSES.PASSED\n    result = status_id: TESTRAIL_STATUSES.PASSED, comment: 'Test Passed'\n    steps.forEach (step) ->\n      switch step.result.status\n        when 'passed', 'skipped' then return\n        when 'failed' then result = status_id: TESTRAIL_STATUSES.FAILED, comment: step.result.error_message\n        else throw new Error \"unknown step result status: #{step.result.status}\"\n    result\n\n\n  _parseName: (name) ->\n    [_, symbol, case_id] = name.split '-'\n    throw new Error \"symbol #{symbol} found in cucumber results is not configured in cucumber_testrail.yml\" if @symbols.indexOf(symbol) is -1\n    throw new Error \"case_id #{case_id} found in cucumber results has an invalid format. id should be numeric\" unless parseInt case_id\n    {symbol, case_id}\n\n\n  _testRailTags: (tags) ->\n    tags.filter ({name}) -> name.indexOf('TestRail') isnt -1\n\nmodule.exports = CucumberResultReader\n"
  ]
}