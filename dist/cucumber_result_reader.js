// Generated by CoffeeScript 2.4.1
(function() {
  var CucumberResultReader, TESTRAIL_STATUSES, fs;

  fs = require('mz/fs');

  TESTRAIL_STATUSES = {
    FAILED: 5,
    PASSED: 1
  };

  CucumberResultReader = class CucumberResultReader {
    constructor({symbols}, file) {
      this.file = file;
      this.symbols = symbols || {};
    }

    parse() {
      var results, testRailMetrics;
      results = fs.readFileSync(this.file, 'utf8');
      testRailMetrics = {};
      this.symbols.forEach(function(item) {
        return testRailMetrics[item] = [];
      });
      JSON.parse(results).forEach((result) => {
        var ref;
        return (ref = result.elements) != null ? ref.forEach(({tags = [], type, steps}) => {
          var testrail_ids;
          testrail_ids = this._testRailTags(tags);
          if (!(testrail_ids.length && type === 'scenario')) {
            return;
          }
          return testrail_ids.forEach(({name}) => {
            var case_id, comment, status_id, symbol;
            ({symbol, case_id} = this._parseName(name));
            ({comment, status_id} = this._examineScenario(steps));
            return testRailMetrics[symbol].push({case_id, status_id, comment});
          });
        }) : void 0;
      });
      return testRailMetrics;
    }

    _examineScenario(steps) {
      var result, status_id;
      status_id = TESTRAIL_STATUSES.PASSED;
      result = {
        status_id: TESTRAIL_STATUSES.PASSED,
        comment: 'Test Passed'
      };
      steps.forEach(function(step) {
        switch (step.result.status) {
          case 'passed':
          case 'skipped':
            break;
          case 'failed':
            return result = {
              status_id: TESTRAIL_STATUSES.FAILED,
              comment: step.result.error_message
            };
          default:
            throw new Error(`unknown step result status: ${step.result.status}`);
        }
      });
      return result;
    }

    _parseName(name) {
      var _, case_id, symbol;
      [_, symbol, case_id] = name.split('-');
      if (this.symbols.indexOf(symbol) === -1) {
        throw new Error(`symbol ${symbol} found in cucumber results is not configured in cucumber_testrail.yml`);
      }
      if (!parseInt(case_id)) {
        throw new Error(`case_id ${case_id} found in cucumber results has an invalid format. id should be numeric`);
      }
      return {symbol, case_id};
    }

    _testRailTags(tags) {
      return tags.filter(function({name}) {
        return name.indexOf('TestRail') !== -1;
      });
    }

  };

  module.exports = CucumberResultReader;

}).call(this);

//# sourceMappingURL=cucumber_result_reader.js.map
